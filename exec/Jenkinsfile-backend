pipeline {
  agent any
  
  environment {
    HOME = "${env.WORKSPACE}"
    GRADLE_USER_HOME = "$WORKSPACE/.gradle"
    CI = false

    GIT_MESSAGE = """${sh(
        script: 'git show -s --pretty="* Commit %h by %cn <%ce>%n* Title: %s%n* Date: %cI"',
        returnStdout: true
    )}"""
    CHANNEL = 'D102-Alert'
    SUCCESS_ICON = 'https://www.jenkins.io/images/logos/seonbi/256.png'
    FAIL_ICON = 'https://www.jenkins.io/images/logos/fire/256.png'
  }
 
  stages {
    stage('Build Backend') {
      steps {
        script {
          withCredentials([file(credentialsId: 'back_profile', variable: 'PROD_YML')]) {
            sh 'cd exec/ && chmod +x project-setup-be.sh && ./project-setup-be.sh'
            sh 'cd exec/ && chmod +x project-build-be.sh && ./project-build-be.sh'
          }
        }
      }
    }
    
    stage('Build and Push Images') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'docker_registry_id_pw', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh 'cd exec/ && chmod +x docker-build-push-be.sh && ./docker-build-push-be.sh'
          }
        }
      }
    }

    stage('Copy .env to Deploy Directory') {
      steps {
        script {
          withCredentials([file(credentialsId: 'be_env_docker_compose', variable: 'DC_ENV')]) {
            sh 'cd exec/ && chmod +x copy-docker-compose-env-be.sh && ./copy-docker-compose-env-be.sh'
          }
        }
      }
    }

    stage('Deploy Backend') {
      steps([$class: 'BapSshPromotionPublisherPlugin']) {
        script {
          withCredentials([usernamePassword(credentialsId: 'docker_registry_id_pw', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sshPublisher(
              continueOnError: false,
              failOnError: true,
              publishers: [
                sshPublisherDesc(
                  configName: 'application', 
                  verbose: true,
                  transfers: [
                    sshTransfer(
                      sourceFiles: 'exec/deploy-backend/**',
                      removePrefix: 'exec/deploy-backend/',
                      remoteDirectory: '/jenkins/deploy/backend',
                      execCommand: """
                                  docker login j10d102.p.ssafy.io -u ${USERNAME} -p ${PASSWORD}; \
                                  cd /home/jenkins/deploy/backend && chmod 755 *.sh; \
                                  ./stop-backend.sh; \
                                  ./start-backend.sh'
                                  """
                    ),
                    sshTransfer(
                      execCommand: """
                                  docker login j10d102.p.ssafy.io -u ${USERNAME} -p ${PASSWORD}; \
                                  cd /home/jenkins/deploy/frontend && chmod 755 *.sh; \
                                  ./stop-frontend.sh; \
                                  ./start-frontend.sh'
                                  """
                    )
                  ]
                )
              ]
            )
          }
        }
      }
    }

    stage('Health Check Backend') {
      steps {
        sh 'sleep 20'
        script {
          withCredentials([string(credentialsId: 'backend_api_url', variable: 'BACKEND_API_URL')]) {
            def HEALTH = sh(
              returnStdout: true,
              script: "curl -s -o /dev/null -w '%{http_code}' ${BACKEND_API_URL}"
            ).trim()

            if (HEALTH == "200") {
              echo "backend api success"
            } else {
              error "backend api fail"
            }
          }
          withCredentials([string(credentialsId: 'backend_file_url', variable: 'BACKEND_FILE_URL')]) {
            def HEALTH = sh(
              returnStdout: true,
              script: "curl -s -o /dev/null -w '%{http_code}' ${BACKEND_FILE_URL}"
            ).trim()

            if (HEALTH == "200") {
              echo "backend file success"
            } else {
              error "backend file fail"
            }
          }
        }
      }
    }
  }

  post {
    success {
      script {
        withCredentials([string(credentialsId: 'gitlab_repo_url', variable: 'GIT_URL')]) {
          withCredentials([string(credentialsId: 'mattermost_url', variable: 'MM_URL')]) {
            mattermostSend(
              color: 'good',
              message: "[BE] Deploy Success: ${env.BUILD_URL}\n${GIT_MESSAGE}",
              endpoint: "${MM_URL}",
              channel: "${CHANNEL}",
              icon: "${SUCCESS_ICON}"
            )
          }
        }
      }
    }
    failure {
      script {
        withCredentials([string(credentialsId: 'gitlab_repo_url', variable: 'GIT_URL')]) {
          withCredentials([string(credentialsId: 'mattermost_url', variable: 'MM_URL')]) {
            mattermostSend(
              color: 'danger',
              message: "[BE] Deploy Fail: ${env.BUILD_URL}\n${GIT_MESSAGE}",
              endpoint: "${MM_URL}",
              channel: "${CHANNEL}",
              icon: "${FAIL_ICON}"
            )
          }
        }
      }
    }
  }
}